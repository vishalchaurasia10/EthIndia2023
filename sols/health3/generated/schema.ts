// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AppointmentCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AppointmentCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AppointmentCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AppointmentCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AppointmentCreated | null {
    return changetype<AppointmentCreated | null>(
      store.get_in_block("AppointmentCreated", id.toHexString())
    );
  }

  static load(id: Bytes): AppointmentCreated | null {
    return changetype<AppointmentCreated | null>(
      store.get("AppointmentCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientId(): BigInt {
    let value = this.get("patientId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set patientId(value: BigInt) {
    this.set("patientId", Value.fromBigInt(value));
  }

  get doctorId(): BigInt {
    let value = this.get("doctorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set doctorId(value: BigInt) {
    this.set("doctorId", Value.fromBigInt(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }

  get symptoms(): string {
    let value = this.get("symptoms");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symptoms(value: string) {
    this.set("symptoms", Value.fromString(value));
  }

  get pastMedHistory(): string {
    let value = this.get("pastMedHistory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pastMedHistory(value: string) {
    this.set("pastMedHistory", Value.fromString(value));
  }

  get appointmentDate(): string {
    let value = this.get("appointmentDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set appointmentDate(value: string) {
    this.set("appointmentDate", Value.fromString(value));
  }

  get appointmentTime(): string {
    let value = this.get("appointmentTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set appointmentTime(value: string) {
    this.set("appointmentTime", Value.fromString(value));
  }

  get urgencyLevel(): string {
    let value = this.get("urgencyLevel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set urgencyLevel(value: string) {
    this.set("urgencyLevel", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DoctorCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DoctorCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DoctorCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DoctorCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DoctorCreated | null {
    return changetype<DoctorCreated | null>(
      store.get_in_block("DoctorCreated", id.toHexString())
    );
  }

  static load(id: Bytes): DoctorCreated | null {
    return changetype<DoctorCreated | null>(
      store.get("DoctorCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get doctorId(): BigInt {
    let value = this.get("doctorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set doctorId(value: BigInt) {
    this.set("doctorId", Value.fromBigInt(value));
  }

  get doctorWalletAddress(): Bytes {
    let value = this.get("doctorWalletAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorWalletAddress(value: Bytes) {
    this.set("doctorWalletAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get age(): string {
    let value = this.get("age");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set age(value: string) {
    this.set("age", Value.fromString(value));
  }

  get gender(): string {
    let value = this.get("gender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set gender(value: string) {
    this.set("gender", Value.fromString(value));
  }

  get doctorAddress(): string {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set doctorAddress(value: string) {
    this.set("doctorAddress", Value.fromString(value));
  }

  get specialization(): string {
    let value = this.get("specialization");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set specialization(value: string) {
    this.set("specialization", Value.fromString(value));
  }

  get consultanceFee(): string {
    let value = this.get("consultanceFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set consultanceFee(value: string) {
    this.set("consultanceFee", Value.fromString(value));
  }

  get duration(): string {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set duration(value: string) {
    this.set("duration", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PatientCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PatientCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PatientCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PatientCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PatientCreated | null {
    return changetype<PatientCreated | null>(
      store.get_in_block("PatientCreated", id.toHexString())
    );
  }

  static load(id: Bytes): PatientCreated | null {
    return changetype<PatientCreated | null>(
      store.get("PatientCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientId(): BigInt {
    let value = this.get("patientId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set patientId(value: BigInt) {
    this.set("patientId", Value.fromBigInt(value));
  }

  get patientWalletAddress(): Bytes {
    let value = this.get("patientWalletAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientWalletAddress(value: Bytes) {
    this.set("patientWalletAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get age(): string {
    let value = this.get("age");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set age(value: string) {
    this.set("age", Value.fromString(value));
  }

  get dateOfBirth(): string {
    let value = this.get("dateOfBirth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dateOfBirth(value: string) {
    this.set("dateOfBirth", Value.fromString(value));
  }

  get gender(): string {
    let value = this.get("gender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set gender(value: string) {
    this.set("gender", Value.fromString(value));
  }

  get patientAddr(): string {
    let value = this.get("patientAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set patientAddr(value: string) {
    this.set("patientAddr", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PrescriptionAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrescriptionAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PrescriptionAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PrescriptionAdded", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PrescriptionAdded | null {
    return changetype<PrescriptionAdded | null>(
      store.get_in_block("PrescriptionAdded", id.toHexString())
    );
  }

  static load(id: Bytes): PrescriptionAdded | null {
    return changetype<PrescriptionAdded | null>(
      store.get("PrescriptionAdded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientId(): BigInt {
    let value = this.get("patientId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set patientId(value: BigInt) {
    this.set("patientId", Value.fromBigInt(value));
  }

  get doctorId(): BigInt {
    let value = this.get("doctorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set doctorId(value: BigInt) {
    this.set("doctorId", Value.fromBigInt(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get prescriptions(): string {
    let value = this.get("prescriptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set prescriptions(value: string) {
    this.set("prescriptions", Value.fromString(value));
  }

  get prescriptionDate(): string {
    let value = this.get("prescriptionDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set prescriptionDate(value: string) {
    this.set("prescriptionDate", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
